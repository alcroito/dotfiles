" General settings
set nocompatible              " be iMproved, required

" Each time a new or existing file is edited, Vim will try to recognize the type
" of the file and set the 'filetype' option.  This will trigger the FileType
" event, which can be used to set the syntax highlighting, set options, etc.
" TODO: Why is off required?
filetype off                  " required

" Enables ruler, but actually doesn't seem to do much when using neovim full
" of plugins
set ruler

" Ignore case when searching
set ignorecase

" Copy indent from current line when starting a new line
"set autoindent

" Do smart autoindenting when starting a new line. Works for C-like
" programs
"set smartindent

" Always show status line
set laststatus=2

" Allow backspace removing whitespace in normal mode
set backspace=indent,eol,start

" Enable relative line numbers hybrid with absolute
set number
set relativenumber

" Show right-side column count margins
set colorcolumn=72,80,100

" TODO: Unclear
"set statusline=%F "tail of the filename


" disable syntax highlighting in big files
function DisableSyntaxTreesitter()
    echo("Big file, disabling syntax, treesitter and folding")
    if exists(':TSBufDisable')
        exec 'TSBufDisable autotag'
        exec 'TSBufDisable highlight'
        " etc...
    endif

    set foldmethod=manual
    syntax clear
    syntax off    " hmmm, which one to use?
    filetype off
    set noundofile
    set noswapfile
    set noloadplugins
    set nohlsearch
endfunction

augroup BigFileDisable
    autocmd!
    " autocmd BufWinEnter * if getfsize(expand("%")) > 512 * 1024 | exec DisableSyntaxTreesitter() | endif
    autocmd BufReadPre,FileReadPre * if getfsize(expand("%")) > 512 * 1024 | exec DisableSyntaxTreesitter() | endif

augroup END


" Initialize plugins
" Specify a directory for plugins (for Neovim: ~/.local/share/nvim/plugged)
call plug#begin('~/.vim/plugged')

" Allow opening files with columns like main.txt:12
Plug 'lervag/file-line'

" comment out blocks of code
Plug 'scrooloose/nerdcommenter'

" Show indentation levels of code
"Plug 'nathanaelkane/vim-indent-guides'

" colorscheme
Plug 'nanotech/jellybeans.vim', { 'tag': 'v1.6' }

" Remember last cursor position, modified to work with suda
Plug 'sevmonster/vim-lastplace', { 'branch': 'feat/scheme-support' }

" Auto sudo write
Plug 'lambdalisue/vim-suda'

" Remember last cursor position
"Plug 'dietsche/vim-lastplace'

" Ack / ag integration
Plug 'mileszs/ack.vim'

" ripgrep integration
Plug 'jremmen/vim-ripgrep'

" Fuzzy file finder
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'

" File explorer
Plug 'scrooloose/nerdtree'

" Smart status bar
Plug 'vim-airline/vim-airline'

" Git integration
Plug 'tpope/vim-fugitive'

" Git gutter integration
Plug 'airblade/vim-gitgutter'

" Git a vim
Plug 'jreybert/vimagit'

" Lua helpers for neogit
Plug 'nvim-lua/plenary.nvim'

" extend selection expand selection + and _
Plug 'terryma/vim-expand-region'

" Additional text-objects for viw like commands
"Plug 'tpope/vim-surround'
"Plug 'machakann/vim-sandwich'

" Switch between header and source files with :A
Plug 'LucHermitte/lh-vim-lib'
Plug 'LucHermitte/alternate-lite'

" Motion highlighting
Plug 'easymotion/vim-easymotion'

" Alternative trying out
" Plug 'rlane/pounce.nvim'

" Buffer explorer (similar to Ctrl+Tab in Qt Creator)
" Doesn't work atm
" set runtimepath^=~/.vim/bundle/buffet

" Visualize undo tree
Plug 'mbbill/undotree'

" Indentation level text objects
Plug 'michaeljsmith/vim-indent-object'

" Set indent space or tabs based on file contents
Plug 'tpope/vim-sleuth'


" Syntax highlighters
" Toml support
Plug 'cespare/vim-toml', { 'branch': 'main' }

" nginx syntax highlighting
Plug 'chr4/nginx.vim'

" qmake syntax highlighting
Plug 'artoj/qmake-syntax-vim'

" qml syntax highlighting
Plug 'peterhoeg/vim-qml'

" gyp highlighting
Plug 'kelan/gyp.vim'

" gn highlighting
Plug 'c0nk/vim-gn'

" qbs highlighting
Plug 'https://JohnKaul@bitbucket.org/JohnKaul/qbs.vim.git'

" cpp highlighting
Plug 'octol/vim-cpp-enhanced-highlight'

" toggle boolean support
Plug 'AndrewRadev/switch.vim'
Plug 'gerazov/vim-toggle-bool'

" tig support
if has('nvim')
    Plug 'codeindulgence/vim-tig'
    let g:tig_default_command = ''
endif

if has('nvim')
    " for git mergetool
    " Plug 'sindrets/diffview.nvim'

    " Lazygit
    Plug 'kdheepak/lazygit.nvim', { 'branch': 'main' }

    " big file disable many things to open faster
    Plug 'LunarVim/bigfile.nvim'

    " A lua profiler for nvim hack
    "Plug 'stevearc/profile.nvim'
endif

" Do gradgual undos with u, where first cursor goes to where the change will
" happen, and only second u will undo, like in other IDEs.
" Somehow breaks undo sometimes
"if has('nvim')
    "Plug 'EtiamNullam/gradual-undo.nvim'
"endif

" Show indentation levels better
if has('nvim')
    Plug 'lukas-reineke/indent-blankline.nvim'
endif

if has('nvim')
    " Use zoxide directory recency jumping
    Plug 'nanotee/zoxide.vim'
endif

if has('nvim')
    " Show virtual text in guttre for simple hints motions
    "Plug 'tris203/precognition.nvim'
endif

if has('nvim')
    " ai auto complete
    "Plug 'hrsh7th/nvim-cmp'
    "Plug 'jcdickinson/codeium.nvim'

    " Better habits
    "Plug 'MunifTanjim/nui.nvim'
    "Plug 'm4xshen/hardtime.nvim'
endif

" Live preview of :global + :substitute
"if has('nvim')
    "Plug 'chentoast/live.nvim'
"endif

" Live preview of :global + :substitute v2
"Plug 'markonm/traces.vim'

" Initialize plugin system
call plug#end()

" work macOS specific lua file to try and profile slow neovim
" lua require('my_profile')


" Check that a plugin has been loaded by checking that the plugin dir trimmed
" with a /, is present in the runtime path.
" From https://vi.stackexchange.com/questions/10939/how-to-see-if-a-plugin-is-active
function! PlugLoaded(name)
    return (
        \ has_key(g:plugs, a:name) &&
        \ isdirectory(g:plugs[a:name].dir) &&
        \ (stridx(&rtp, trim(g:plugs[a:name].dir, '/')) >= 0 ||
        \ stridx(&rtp, trim(g:plugs[a:name].dir, '\')) >= 0)
        \ )
endfunction

" Use surround.vim keymap for vim-sandwhich, to not override default motions
"runtime macros/sandwich/keymap/surround.vim

" Enable gradual undo
"if has('nvim')
    "lua require('gradual-undo').setup()
"endif

" Enable indentation highlighting
if has('nvim') && PlugLoaded('indent-blankline.nvim')
    lua require("ibl").setup()
endif

" bigfile setup
if has('nvim')
    "lua require("bigfile").setup {}
endif

"lua require("precognition").setup()

if has ('nvim')
    " Load codium
    "lua require("codeium").setup({})
    "lua require("cmp").setup({ sources =   { name = "codeium" }  })

    " Better habits
    "lua require("hardtime").setup()
endif

" Enable live preview of :global command
" Doesn't work for nested :subs
"if has('nvim')
    "lua require("live").setup()
"endif

" vim-cpp-enhanced-highlight options
let g:cpp_class_scope_highlight = 1
let g:cpp_experimental_template_highlight = 1
let c_no_curly_error=1

"Search for strings with slashes, without escaping them, with :SS
command! -nargs=1 SS let @/ = '\V'.escape(<q-args>, '\')

" Smart indent
filetype plugin indent on

" show existing tab with 4 spaces width
"set tabstop=4

" " when indenting with '>', use 4 spaces width
"set shiftwidth=4

" " On pressing tab, insert 4 spaces
set expandtab

" Disable mouse visual select
set mouse=

" set qmake project files comment strings
autocmd FileType qmake set commentstring=#\ %s

" vim-indent-guides options
" If not enabled on startup, use :IndentGuidesToggle to enable
"let g:indent_guides_enable_on_vim_startup=1
"let g:indent_guides_start_level = 2
"let g:indent_guides_guide_size = 1

" save undo history for documents
if has('persistent_undo')      "check if your vim version supports it
  set undofile                 "turn on the feature
  set undodir=$HOME/.vim/undo  "directory where the undo files will be stored
endif

" Enables syntax highlighting. Do it after persistent_undo, due to weird
" neovim bug https://github.com/neovim/neovim/issues/32722
:syntax on

" Replace Ack with Ag
let g:ackprg = 'ag --vimgrep --smart-case'
cnoreabbrev ag Ack
cnoreabbrev aG Ack
cnoreabbrev Ag Ack
cnoreabbrev AG Ack

" Replace Ack with ripgrep
if executable('rg')
  let g:ackprg = 'rg --vimgrep'
endif

" Best colorscheme found
silent! colorscheme jellybeans

" Enable proper colors for yazi inside tmux inside neovim
set termguicolors

" map leader to space
map <SPACE> <leader>

" map fzf keybindings
nmap <leader>zt :Files<CR>
nmap <leader>zf :Files<CR>
nmap <leader>zb :Buffers<CR>
nmap <C-P> :Files<CR>

" Trigger toggle bool
nnoremap <Leader>tb :ToggleBool<CR>

" Trigger lazygit
nnoremap <silent> <leader>gg :LazyGit<CR>

" map "leader cd" to changing directory to current open file
nnoremap <leader>cd :cd %:p:h<CR>:pwd<CR>

" map \s to update the save the current file if it was updated (simiar to :w)
"nnoremap <Leader>s :update<cr>

" map ,gb to Tig blame current file
" to make it work with yazi which opens the files with a full dir path, but
" doesn't change the current directory, we first switch to the file directory
" then we blame just the file name, and then switch back to the previous
" directory. <bar> is | which is used to separate commands in a single line.
" https://stackoverflow.com/questions/4525261/getting-relative-paths-in-vim
" https://stackoverflow.com/questions/2288756/how-to-set-working-current-directory-in-vim
" https://stackoverflow.com/questions/23204110/mapping-one-key-to-multiple-commands-in-vim
"nnoremap <leader>gb :exe ':Tig blame '. @%<cr>
nnoremap <leader>gb :cd %:h <bar> :exe ':Tig blame '. expand("%:.") <bar> :cd - <cr>

" map ,gt to Tig
nnoremap <leader>gt :exe ':Tig '<cr>

" map ,gd to Tig diff
nnoremap <leader>gd :exe ':Tig'<cr>d

" map ,gc to Tig current buffer file path
nnoremap <leader>gc :exe ':Tig' fnamemodify(bufname(1), ':p') <cr>

" open nerdtree shortcut
map <leader>tt :NERDTreeToggle<CR>
map <leader>tm :NERDTreeFind<CR>
map <leader>tc :NERDTreeCWD<CR>

" Open zoxide fzf jump
map <leader>o :Zi<CR>

" Type :e %%/filename to edit file in same dir as currently opened file
cabbr <expr> %% expand('%:p:h')

" replace selection with paste, without changing default register content
vnoremap <space>p "_dP

" text object to select a line
xnoremap <silent> il :<c-u>normal! g_v^<cr>
onoremap <silent> il :<c-u>normal! g_v^<cr>

" Highlight trailing whitespace
highlight ExtraWhitespace ctermbg=red guibg=red
match ExtraWhitespace /\s\+$/
autocmd BufWinEnter * match ExtraWhitespace /\s\+$/
autocmd InsertEnter * match ExtraWhitespace /\s\+\%#\@<!$/
autocmd InsertLeave * match ExtraWhitespace /\s\+$/
autocmd BufWinLeave * call clearmatches()

" Remove trailing whitespace on save
fun! <SID>StripTrailingWhitespaces()
    let l = line(".")
    let c = col(".")
    %s/\s\+$//e
    call cursor(l, c)
endfun
autocmd BufWritePre * :call <SID>StripTrailingWhitespaces()

" Alt Tab switching between buffers, using Buffet plugin.
" noremap <F10> :Bufferlistsw<CR>
" noremap <F11> :Bufferlistsw<CR>kk

" Maps Ctrl F10 and Ctrl F11 to switch buffers. iTerm2 is configured to send
" that when pressing Alt-Tab and Alt-Shift-Tab.
"augroup BuffetAdd
   "if !exists("g:BuffetAdded")
      "let g:BuffetAdded = 1
      "au BufWinEnter buflisttempbuffer* map <buffer> <Tab> <CR>
      "au BufWinEnter buflisttempbuffer* map <buffer> <Esc>[21~   j
      "au BufWinEnter buflisttempbuffer* map <buffer> <Esc>[23~ k
   "endif
"augroup END

" Enable mappings for terminal
if has('nvim')
   tnoremap <Esc> <C-\><C-n>
   tnoremap <expr> <C-R> '<C-\><C-N>"'.nr2char(getchar()).'pi'
endif

" Allow saving of files as sudo when I forgot to start vim using sudo.
" cmap w!! w !sudo tee > /dev/null %
cnoremap w!! execute 'silent! write !sudo tee % >/dev/null' <bar> edit!

" Enable auto sudo write
let g:suda_smart_edit = 1

" re-enable backup, swap, undo for suda buffers that we can read
" https://github.com/lambdalisue/vim-suda/issues/25
function s:SudaSettingsSave()
    let b:sev_suda_swapfile = &swapfile
    let b:sev_suda_undofile = &undofile
endfunction
function s:SudaSettingsRestore()
    if filereadable(expand('<afile>')[7:])
        if exists('b:sev_suda_swapfile') && b:sev_suda_swapfile
            try
                setlocal swapfile
            catch
                " ignore swapfile errors, they should have been shown already
                echohl ErrorMsg
                for line in split(v:exception, '\n')
                    echomsg printf('[suda] %s', line)
                endfor
                echohl None
            endtry
        endif
        if exists('b:sev_suda_undofile') && b:sev_suda_undofile
            setlocal undofile
        endif
    endif
endfunction
function s:SudaProcessUndo(cmd)
    let p = expand('<afile>')[7:]
    if has('win32') || !&undofile || !filereadable(p)
        return
    endif
    let p = resolve(p)
    " XXX: comments are from :help backupdir to mark implementation details
    let x = &undodir
    " For backwards compatibility with Vim version 3.0 a '>' at the start
    " of the option is removed.
    if stridx(x, '>') == 0
        let x = x[1:]
    endif
    " To include a comma in a directory name precede it with a backslash.
    for u in split(x, '\v\\@1<!,')
        " Spaces after the comma are ignored, other spaces are considered part
        " of the directory name.
        let u = trim(u, ' ', 1)
        " To have a space at the start of a directory name, precede it with a
        " backslash.
        if stridx(u, '\ ') == 0
            let u = u[1:]
        endif
        " Empty means that no backup file will be created.
        if empty(u)
            continue
        elseif u == '.'
            " A directory "." means to put the backup file in the same
            " directory as the edited file.
            let d = fnamemodify(p, ':p:h')
        elseif stridx(u, './') == 0
            " A directory starting with "./" (or ".\" for MS-Windows) means to
            " put the backup file relative to where the edited file is.
            let d = printf('%s%s', fnamemodify(p, ':p:h'), expand(u))
        else
            let d = u
        endif
        " NOTE: env vars are not expanded, and backslashes are not handled...
        if u[-2:-1] == '//'
            let f = fnamemodify(p, ':p:gs?/?%?')
        else
            let f = printf('.%s.un~', fnamemodify(p, ':t'))
        endif
        " A directory name may end in an '/'.
        let d = trim(d, '/', 2)
        if !isdirectory(d)
            continue
        endif
        try
            execute printf('%s %s/%s', a:cmd, fnameescape(d), fnameescape(f))
            break
        catch
            continue
        endtry
    endfor
endfunction
autocmd BufReadPre suda://* call s:SudaSettingsSave()
autocmd BufReadPost suda://* call s:SudaSettingsRestore()
autocmd BufReadPost suda://* call s:SudaProcessUndo('silent! rundo')
autocmd BufWritePost suda://* call s:SudaProcessUndo('wundo!')

" Set updatetime to 1sec for git gutter plugin
set updatetime=1000

" Set text width to 71 chars for git commit message editing
au FileType gitcommit setlocal tw=70

" Open Nerdtree when editing a directory
"autocmd StdinReadPre * let s:std_in=1
"autocmd VimEnter * if argc() == 1 && isdirectory(argv()[0]) && !exists("s:std_in") | exe 'NERDTree' argv()[0] | wincmd p | ene | exe 'cd '.argv()[0] | endif

" Don't use nerdtree when editing a dir directlry, use netrw instead
let NERDTreeHijackNetrw = 0

" Spellchecking git commit messages
autocmd FileType gitcommit setlocal spell
